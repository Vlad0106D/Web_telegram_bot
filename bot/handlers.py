# bot/handlers.py
import logging
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, Application

from strategy.base_strategy import analyze_symbol, format_signal

log = logging.getLogger(__name__)

# —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
WATCHLIST = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/check ‚Äî –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\n"
        "/find <symbol> ‚Äî –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )


async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üìò –ü–æ–º–æ—â—å:\n"
        "/check ‚Äî –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä\n"
        "/find BTCUSDT ‚Äî –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é RSI, EMA, MACD, ADX –∏ –¥–∞—é —Å–∏–≥–Ω–∞–ª."
    )


async def _analyze_and_send(symbol: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    """
    try:
        result = await analyze_symbol(symbol, tf="1h")  # async –≤—ã–∑–æ–≤
        if not result:
            await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {symbol}")
            return

        msg = format_signal(result)
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="HTML")

    except Exception as e:
        log.error("analyze/send failed for %s: %s", symbol, e, exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")


async def cmd_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ WATCHLIST.
    """
    chat_id = update.effective_chat.id
    await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º‚Ä¶")

    for symbol in WATCHLIST:
        await _analyze_and_send(symbol, chat_id, context)


async def cmd_find(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /find BTCUSDT
    """
    chat_id = update.effective_chat.id
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É. –ü—Ä–∏–º–µ—Ä: /find BTCUSDT")
        return

    symbol = context.args[0].upper()
    await _analyze_and_send(symbol, chat_id, context)


def register_handlers(app: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram-–±–æ—Ç–∞.
    """
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("check", cmd_check))
    app.add_handler(CommandHandler("find", cmd_find))

    log.info("Handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: /start, /help, /check, /find")