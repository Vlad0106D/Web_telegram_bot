# bot/handlers.py
from __future__ import annotations

import logging
from typing import Iterable, List, Optional

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ:
# - strategy.base_strategy.analyze_symbol(symbol: str, tf: str = "1h") -> dict
# - strategy.base_strategy.format_signal(res: dict) -> str
from strategy.base_strategy import analyze_symbol, format_signal

logger = logging.getLogger("bot.handlers")


async def _send_text(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int | str, text: str) -> None:
    try:
        await ctx.bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        logger.exception("send_message failed: %s", e)


async def _analyze_and_send(
    symbol: str,
    ctx: ContextTypes.DEFAULT_TYPE,
    chat_id: int | str,
    tf: str = "1h",
) -> None:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    –í—Å–µ –≤—ã–∑–æ–≤—ã ‚Äî —á–µ—Ä–µ–∑ await, –±–µ–∑ run_until_complete.
    """
    try:
        result = await analyze_symbol(symbol, tf=tf)  # –æ–∂–∏–¥–∞–µ–º dict
        text = format_signal(result)                  # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        await _send_text(ctx, chat_id, text)
    except Exception as e:
        logger.exception("analyze/send failed for %s %s", symbol, tf)
        await _send_text(ctx, chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")


# ==== –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ====

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await _send_text(
        context,
        update.effective_chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤. –ö–æ–º–∞–Ω–¥—ã: /help, /check, /find <SYMBOL>.",
    )


async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await _send_text(
        context,
        update.effective_chat.id,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /check ‚Äî –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä –∏–∑ watchlist\n"
        "‚Ä¢ /find <SYMBOL> ‚Äî –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /find BTCUSDT)\n"
        "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å",
    )


def _normalize_watchlist(watchlist: Optional[Iterable[str]]) -> List[str]:
    if not watchlist:
        return []
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ/–ø—Ä–æ–±–µ–ª—å–Ω—ã–µ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    return [s.strip().upper() for s in watchlist if isinstance(s, str) and s.strip()]


def register_handlers(
    app: Application,
    watchlist: Optional[Iterable[str]] = None,
    alert_chat_id: Optional[int | str] = None,   # –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã. –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –≤—ã–∑–æ–≤–æ–º –∏–∑ main.py.
    """
    wl = _normalize_watchlist(watchlist)

    async def cmd_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        chat_id = update.effective_chat.id
        if not wl:
            await _send_text(context, chat_id, "‚ö†Ô∏è Watchlist –ø—É—Å—Ç. –î–æ–±–∞–≤—å –ø–∞—Ä—ã –≤ –∫–æ–Ω—Ñ–∏–≥.")
            return

        await _send_text(
            context,
            chat_id,
            f"üîé –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ø–∏—Å–∫—É: {', '.join(wl)} (TF: 1h)‚Ä¶",
        )
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        for symbol in wl:
            await _analyze_and_send(symbol, context, chat_id, tf="1h")

    async def cmd_find(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        chat_id = update.effective_chat.id
        # —Å–∏–º–≤–æ–ª –±–µ—Ä—ë–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await _send_text(context, chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /find BTCUSDT)")
            return
        symbol = context.args[0].strip().upper()
        await _send_text(context, chat_id, f"üîé –ê–Ω–∞–ª–∏–∑ {symbol} (TF: 1h)‚Ä¶")
        await _analyze_and_send(symbol, context, chat_id, tf="1h")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("check", cmd_check))
    app.add_handler(CommandHandler("find", cmd_find))

    logger.info("Handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: /start, /help, /check, /find")