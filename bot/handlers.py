# bot/handlers.py
# -*- coding: utf-8 -*-

from __future__ import annotations

import asyncio
import logging
from typing import List, Optional

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

from config import PAIRS
from strategy.base_strategy import analyze_symbol, format_signal

log = logging.getLogger(__name__)


# ============ helpers ============

async def _analyze_and_send(chat_id: int, symbol: str, tf: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª."""
    try:
        result = await analyze_symbol(symbol, tf=tf)  # –æ–∂–∏–¥–∞–µ—Ç—Å—è dict —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
        if not result:
            await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {symbol} –Ω–∞ TF {tf}.")
            return

        text = format_signal(result)  # ¬´üíé –°–ò–ì–ù–ê–õ ‚Ä¶¬ª (–æ–¥–Ω–∞ –ø–∞—Ä–∞ ‚Äî –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        await context.bot.send_message(chat_id=chat_id, text=text, disable_web_page_preview=True)
    except Exception as e:
        log.exception("analyze/send failed for %s %s", symbol, tf)
        await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")


def _parse_tf(args: List[str], default_tf: str = "1h") -> str:
    """–î–æ—Å—Ç–∞—ë–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ / –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1h."""
    if not args:
        return default_tf
    tf = args[-1].lower()
    # –¥–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    alias = {"1hour": "1h", "4hour": "4h", "15min": "15m", "30min": "30m"}
    return alias.get(tf, tf)


# ============ commands ============

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥—ã: /ping, /check, /find")

async def ping_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("pong ‚úÖ")

async def check_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ —Å–ø–∏—Å–∫—É PAIRS –∏ —à–ª—ë–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ."""
    tf = _parse_tf(context.args, default_tf="1h")
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –Ω–∞ TF {tf}‚Ä¶")

    tasks = [ _analyze_and_send(chat_id, symbol, tf, context) for symbol in PAIRS ]
    await asyncio.gather(*tasks)

async def find_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /find <SYMBOL> [TF]
    –ü—Ä–∏–º–µ—Ä: /find BTCUSDT 1h
    """
    chat_id = update.effective_chat.id
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find SYMBOL [TF]. –ü—Ä–∏–º–µ—Ä: /find BTCUSDT 1h")
        return

    symbol = context.args[0].upper()
    tf = _parse_tf(context.args[1:], default_tf="1h")
    await _analyze_and_send(chat_id, symbol, tf, context)


# ============ public API ============

def register_handlers(app: Application) -> None:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã.
    –í–∞–∂–Ω–æ: –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –æ—Ç—Å—é–¥–∞ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–æ–Ω—è—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    """
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("ping",  ping_cmd))
    app.add_handler(CommandHandler("check", check_cmd))
    app.add_handler(CommandHandler("find",  find_cmd))
    log.info("Handlers registered: /start, /ping, /check, /find")