# bot/watcher.py
from __future__ import annotations

import logging
from datetime import timedelta
from typing import Iterable, Sequence, List, Dict, Any

from telegram import Update
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
)

from config import WATCHER_TFS, WATCHER_INTERVAL_SEC, ALERT_CHAT_ID

log = logging.getLogger(__name__)

__all__ = [
    "schedule_watcher_jobs",
    "register_watch_handlers",
    "cmd_watch_on",
    "cmd_watch_off",
    "cmd_watch_status",
]

# ----------------------- –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã -----------------------


def _normalize_tfs(tfs: Iterable[str] | None) -> List[str]:
    if not tfs:
        return []
    uniq: List[str] = []
    for tf in tfs:
        s = str(tf).strip()
        if s and s not in uniq:
            uniq.append(s)
    return uniq


def _job_name(tf: str) -> str:
    return f"watch_{tf}"


def _jobs_summary(app: Application) -> str:
    jq = app.job_queue
    names = []
    # –ø—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –∏–º–µ–Ω–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for tf in _normalize_tfs(WATCHER_TFS):
        if jq.get_jobs_by_name(_job_name(tf)):
            names.append(_job_name(tf))
    return ", ".join(names) if names else "‚Äî"


# ----------------------- –ª–æ–≥–∏–∫–∞ —Ç–∏–∫–∞ –≤–æ—Ç—á–µ—Ä–∞ -----------------------


async def _watch_tick(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–¥–∏–Ω —Ç–∏–∫ –≤–æ—Ç—á–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ TF.
    –í context.job.data –ª–µ–∂–∏—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏: tf, chat_id.
    –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —Å–≤–æ—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    data: Dict[str, Any] = context.job.data or {}
    tf: str = data.get("tf", "?")
    chat_id: int | None = data.get("chat_id")

    try:
        # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏–∫. –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–≤–æ—è —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞.
        log.info("Watcher tick fired: tf=%s, chat_id=%s", tf, chat_id)

        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–∏–Ω–≥–∞–Ω—É—Ç—å —á–∞—Ç –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–∏–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
        # if chat_id:
        #     await context.bot.send_message(chat_id=chat_id, text=f"‚è∞ Watcher tick: {tf}")

    except Exception:
        log.exception("Watcher tick failed for tf=%s", tf)


# ----------------------- API –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ -----------------------


def schedule_watcher_jobs(
    app: Application,
    tfs: Iterable[str],
    interval_sec: int,
    chat_id: int | None = None,
) -> Sequence[str]:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç/–ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –≤–æ—Ç—á–µ—Ä–∞.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ TF —Å–æ–∑–¥–∞—ë—Ç—Å—è job —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º 'watch_{tf}'.
    –ï—Å–ª–∏ job —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è –∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–Ω–æ–≤–æ.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö jobs.
    """
    jq = app.job_queue
    created: List[str] = []
    norm_tfs = _normalize_tfs(tfs)

    # —Å–æ—Ö—Ä–∞–Ω–∏–º —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ bot_data (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    if chat_id is not None:
        app.bot_data["watch_chat_id"] = int(chat_id)
    # fallback ‚Äî –∏–∑ config
    default_chat = app.bot_data.get("watch_chat_id") or ALERT_CHAT_ID

    for tf in norm_tfs:
        name = _job_name(tf)

        # —É–¥–∞–ª–∏–º –≤—Å–µ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –±—ã–ª–∏)
        for old in jq.get_jobs_by_name(name):
            try:
                old.schedule_removal()
            except Exception:
                log.exception("Failed to remove old job '%s'", name)

        # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
        jq.run_repeating(
            _watch_tick,
            interval=timedelta(seconds=int(interval_sec)),
            first=5,  # —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            name=name,
            data={"tf": tf, "chat_id": default_chat},
        )
        created.append(name)
        log.info(
            "Watcher job scheduled: name=%s, interval=%ss, chat_id=%s",
            name,
            interval_sec,
            default_chat,
        )

    log.info(
        "Watcher scheduled for TFs=%s, interval=%ss",
        ", ".join(norm_tfs) if norm_tfs else "[]",
        interval_sec,
    )
    return created


def _stop_all_watcher_jobs(app: Application) -> int:
    jq = app.job_queue
    count = 0
    for tf in _normalize_tfs(WATCHER_TFS):
        name = _job_name(tf)
        jobs = jq.get_jobs_by_name(name)
        for j in jobs:
            try:
                j.schedule_removal()
                count += 1
            except Exception:
                log.exception("Failed to remove job '%s'", name)
    return count


# ----------------------- –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã -----------------------


async def cmd_watch_on(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    app = context.application
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —á–∞—Ç, –≥–¥–µ –≤—ã–∑–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É -> ALERT_CHAT_ID
    chat_id = update.effective_chat.id if update.effective_chat else ALERT_CHAT_ID
    app.bot_data["watch_chat_id"] = int(chat_id)

    created = schedule_watcher_jobs(
        app=app,
        tfs=WATCHER_TFS,
        interval_sec=int(WATCHER_INTERVAL_SEC),
        chat_id=chat_id,
    )

    text = (
        "‚úÖ –í–æ—Ç—á–µ—Ä –∑–∞–ø—É—â–µ–Ω.\n"
        f"–ß–∞—Ç: <code>{chat_id}</code>\n"
        f"TF: {', '.join(_normalize_tfs(WATCHER_TFS)) or '‚Äî'}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {WATCHER_INTERVAL_SEC} —Å–µ–∫.\n"
        f"Jobs: {', '.join(created) if created else '‚Äî'}"
    )
    if update.effective_message:
        await update.effective_message.reply_text(text)


async def cmd_watch_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    app = context.application
    removed = _stop_all_watcher_jobs(app)
    text = f"‚õî –í–æ—Ç—á–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {removed}"
    if update.effective_message:
        await update.effective_message.reply_text(text)


async def cmd_watch_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    app = context.application
    chat_id = app.bot_data.get("watch_chat_id") or ALERT_CHAT_ID
    jobs = _jobs_summary(app)
    text = (
        "üìü –°—Ç–∞—Ç—É—Å –≤–æ—Ç—á–µ—Ä–∞\n"
        f"–ß–∞—Ç: <code>{chat_id or '‚Äî'}</code>\n"
        f"TF: {', '.join(_normalize_tfs(WATCHER_TFS)) or '‚Äî'}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {WATCHER_INTERVAL_SEC} —Å–µ–∫.\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ jobs: {jobs}"
    )
    if update.effective_message:
        await update.effective_message.reply_text(text)


def register_watch_handlers(app: Application) -> None:
    """
    –£–¥–æ–±–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥. –ï—Å–ª–∏ —Ç—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å —Å–≤–æ–∏ watch_*
    –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ ‚Äî –º–æ–∂–µ—à—å –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.
    """
    app.add_handler(CommandHandler("watch_on", cmd_watch_on))
    app.add_handler(CommandHandler("watch_off", cmd_watch_off))
    app.add_handler(CommandHandler("watch_status", cmd_watch_status))