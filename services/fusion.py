# services/fusion.py
from __future__ import annotations

from dataclasses import dataclass, asdict
from typing import Optional, List, Dict, Tuple

from services.analyze import analyze_symbol
from services.breaker import detect_breakout
from services.reversal import detect_reversals
from services.market_data import get_price, get_candles

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ config.py)
try:
    from config import FUSION_MIN_CONF
except Exception:
    FUSION_MIN_CONF = 75  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å Strategy, —á—Ç–æ–±—ã –µ—ë –≥–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç–∞–ª—Å—è

try:
    from config import FUSION_REQUIRE_ANY
except Exception:
    FUSION_REQUIRE_ANY = 2  # —Å–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞—Å—Ç—å –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (2 –∏–∑ 3)

try:
    from config import BREAKER_LOOKBACK, BREAKER_EPS
except Exception:
    BREAKER_LOOKBACK, BREAKER_EPS = 50, 0.001


@dataclass
class FusionEvent:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Fusion-—Å–∏–≥–Ω–∞–ª–∞.
    –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è 'score' (—Å–∏–Ω–æ–Ω–∏–º confidence) –∏ 'trend1d'
    ‚Äî –∏–º–µ–Ω–Ω–æ –∏—Ö –∂–¥—ë—Ç TrueTrading.
    """
    symbol: str
    tf: str                       # TF –≤–æ—Ç—á–µ—Ä-—Ü–∏–∫–ª–∞ (–¥–ª—è breaker), –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
    side: str                     # "long" | "short"
    confidence: int               # 0..100
    score: int                    # –¥—É–±–ª–∏–∫–∞—Ç confidence –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TrueTrading
    price: float
    exchange: str
    components: Dict[str, str]    # {"strategy": "long/short/none", "breaker": "up/down/none", "reversal": "bull/bear/none"}
    reasons: List[str]

    # –ù–æ–≤—ã–µ / –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è TrueTrading –∏ "–∏—Å—Ç–∏–Ω–Ω–æ–≥–æ" –∫–æ–Ω—Ñ–ª—é—ç–Ω—Å–∞:
    trend1d: Optional[str] = None         # "up" | "down"
    zone_center: Optional[float] = None   # —Ü–µ–Ω—Ç—Ä –∑–æ–Ω—ã Fusion (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∑–æ–Ω—ã)
    zone_halfwidth: Optional[float] = None  # –ø–æ–ª—É-—à–∏—Ä–∏–Ω–∞ –∑–æ–Ω—ã (–¥–æ–ø—É—Å–∫ –≤–æ–∫—Ä—É–≥ center)


def _reversal_side(kind: str) -> Optional[str]:
    if kind in ("impulse_bull", "bullish_div"):
        return "long"
    if kind in ("impulse_bear", "bearish_div"):
        return "short"
    return None


def _breaker_side(direction: Optional[str]) -> Optional[str]:
    if direction == "up":
        return "long"
    if direction == "down":
        return "short"
    return None


async def _calc_trend_1d(symbol: str) -> Optional[str]:
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–Ω–¥ 1D: EMA21 - EMA50.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "up" –∏–ª–∏ "down" (–∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ).
    """
    try:
        dfd, _ = await get_candles(symbol, "1d", limit=150)
        if dfd is None or dfd.empty:
            return None
        ema21 = dfd["close"].ewm(span=21, adjust=False).mean()
        ema50 = dfd["close"].ewm(span=50, adjust=False).mean()
        t = "up" if (ema21.iloc[-1] - ema50.iloc[-1]) >= 0 else "down"
        return t
    except Exception:
        return None


async def analyze_fusion(symbol: str, tf: str) -> Optional[FusionEvent]:
    """
    –ü—Ä–æ—Å—Ç–∞—è ¬´—Å—Ö–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è¬ª:
      ‚Ä¢ Strategy: analyze_symbol(). –ì–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ conf >= FUSION_MIN_CONF.
      ‚Ä¢ Breaker: detect_breakout(tf). up -> long, down -> short.
      ‚Ä¢ Reversal: –±–µ—Ä—ë–º –ü–û–°–õ–ï–î–ù–ï–ï —Å–æ–±—ã—Ç–∏–µ –∏–∑ detect_reversals() (–ø—Ä–∏–æ—Ä. –∏–º–ø—É–ª—å—Å—ã 5m/10m),
                  bull -> long, bear -> short.

      –ï—Å–ª–∏ –Ω–µ –º–µ–Ω–µ–µ FUSION_REQUIRE_ANY –º–æ–¥—É–ª–µ–π —Å–æ—à–ª–∏—Å—å –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º FusionEvent.
      –ò—Ç–æ–≥–æ–≤–∞—è confidence = —Å—Ä–µ–¥–Ω–µ–µ ¬´–≤–µ—Å–æ–≤¬ª –º–æ–¥—É–ª–µ–π + –±–æ–Ω—É—Å –∑–∞ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—é (+10 –µ—Å–ª–∏ 3/3).
      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º trend1d –∏ –∫–ª–∞–¥—ë–º –µ–≥–æ –≤ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TrueTrading.
    """
    # 1) Strategy
    S = await analyze_symbol(symbol)
    s_signal = (S.get("signal") or "none").lower()
    s_conf   = int(S.get("confidence") or 0)
    s_side   = s_signal if s_signal in ("long", "short") and s_conf >= FUSION_MIN_CONF else None

    # 2) Breaker
    B = await detect_breakout(symbol, tf=tf, lookback=BREAKER_LOOKBACK, eps=BREAKER_EPS)
    b_side = _breaker_side(B.direction) if B else None

    # 3) Reversal
    R = await detect_reversals(symbol)
    r_side = None
    r_kind = None
    if R:
        # –≤—ã–±–µ—Ä–µ–º ¬´—Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ¬ª —Å–æ–±—ã—Ç–∏–µ, –æ—Ç–¥–∞–≤–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–º–ø—É–ª—å—Å–Ω—ã–º (5m/10m)
        tf_weight = {"5m": 3, "10m": 3, "15m": 2, "30m": 2, "1h": 1, "4h": 0}
        R_sorted = sorted(R, key=lambda e: (tf_weight.get(e.tf, -1), e.ts), reverse=True)
        r_sel = R_sorted[0]
        r_side = _reversal_side(r_sel.kind)
        r_kind = r_sel.kind

    # –ü–æ–¥—Å—á—ë—Ç –≥–æ–ª–æ—Å–æ–≤
    votes: Dict[str, int] = {"long": 0, "short": 0}
    weights: Dict[str, List[int]] = {"long": [], "short": []}
    reasons: List[str] = []

    if s_side:
        votes[s_side] += 1
        weights[s_side].append(s_conf)  # Strategy –≤–Ω–æ—Å–∏—Ç —Å–≤–æ–π real conf
        reasons.append(f"Strategy: {s_side} (conf={s_conf})")
    else:
        reasons.append("Strategy: none / low-confidence")

    if b_side:
        votes[b_side] += 1
        weights[b_side].append(70)      # Breaker ‚Äî —Ñ–∏–∫—Å. –≤–µ—Å (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
        reasons.append(f"Breaker: {b_side}")
    else:
        reasons.append("Breaker: none")

    if r_side:
        votes[r_side] += 1
        weights[r_side].append(75)      # Reversal ‚Äî —Ñ–∏–∫—Å. –≤–µ—Å (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
        reasons.append(f"Reversal: {r_side} ({r_kind})")
    else:
        reasons.append("Reversal: none")

    # –ò—â–µ–º —Å—Ç–æ—Ä–æ–Ω—É —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    side = None
    for k in ("long", "short"):
        if votes[k] >= FUSION_REQUIRE_ANY:
            side = k
            break

    if side is None:
        return None

    # –ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    base_conf = 0
    if weights[side]:
        base_conf = int(sum(weights[side]) / len(weights[side]))
    if (s_side and b_side == side and r_side == side):
        base_conf = min(100, base_conf + 10)  # –±–æ–Ω—É—Å –∑–∞ 3/3

    # –¶–µ–Ω–∞/–±–∏—Ä–∂–∞
    try:
        price, ex = await get_price(symbol)
    except Exception:
        price, ex = float(S.get("price") or 0), S.get("exchange") or "‚Äî"

    components = {
        "strategy": s_side or "none",
        "breaker": b_side or "none",
        "reversal": r_side or "none",
    }

    # –¢—Ä–µ–Ω–¥ 1D –¥–ª—è TrueTrading (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
    t1d = await _calc_trend_1d(symbol)

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å —Ü–µ–Ω—Ç—Ä/—à–∏—Ä–∏–Ω—É –∑–æ–Ω—ã Fusion:
    zone_center = price
    zone_halfwidth = None  # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–π —Ä–∞—Å—á–µ—Ç –∑–æ–Ω—ã ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å —Å—é–¥–∞ –ø–æ–ª—É-—à–∏—Ä–∏–Ω—É

    # –í–ê–ñ–ù–û: 'score' = confidence (–¥–ª—è TrueTrading)
    ev = FusionEvent(
        symbol=symbol,          # –Ω–µ –º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä, —á—Ç–æ–±—ã —Å–æ–≤–ø–∞–ª–æ —Å Fibo-–∫–ª—é—á–æ–º
        tf=tf,
        side=side,
        confidence=base_conf,
        score=base_conf,        # <-- –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è TrueTrading
        price=price,
        exchange=ex,
        components=components,
        reasons=reasons,
        trend1d=t1d,
        zone_center=zone_center,
        zone_halfwidth=zone_halfwidth,
    )
    return ev


def format_fusion_message(ev: FusionEvent) -> str:
    head = "üß© Fusion ‚Äî LONG" if ev.side == "long" else "üß© Fusion ‚Äî SHORT"
    parts = [
        f"{head}",
        f"{ev.symbol} ‚Äî {ev.price:.8f} ({ev.exchange})",
        f"TF: {ev.tf}  ‚Ä¢  Confidence: {ev.confidence}%  ‚Ä¢  1D: {ev.trend1d or '‚Äî'}",
        "Confluence:",
        f"‚Ä¢ Strategy: {ev.components.get('strategy')}",
        f"‚Ä¢ Breaker:  {ev.components.get('breaker')}",
        f"‚Ä¢ Reversal: {ev.components.get('reversal')}",
    ]
    if ev.reasons:
        parts.append("")
        for r in ev.reasons[:5]:
            parts.append(f"‚Ä¢ {r}")
    return "\n".join(parts)


# ==== –í–ê–ñ–ù–û –¥–ª—è TrueTrading: –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å dict –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ====

def fusion_to_tt_dict(ev: FusionEvent) -> Dict[str, object]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç FusionEvent –≤ —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç TrueTrading.update_fusion():
      ‚Ä¢ side: "long"/"short"
      ‚Ä¢ score: int (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä–æ–º ATTN_FUSION_MIN)
      ‚Ä¢ trend1d: "up"/"down" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ; TrueTrading –±–µ—Ä—ë—Ç —Ç–∞–∫–∂–µ –∏–∑ Fibo)
      ‚Ä¢ zone_center / zone_halfwidth: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–µ)
      ‚Ä¢ tf / symbol ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ; TrueTrading –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö –∫–∞–∫ –∫–ª—é—á –∫—ç—à–∞
    """
    d = asdict(ev)
    # TrueTrading —á–∏—Ç–∞–µ—Ç –∏–º–µ–Ω–Ω–æ 'score'
    d["score"] = int(ev.score)
    # –û—Å—Ç–∞–≤–ª—è–µ–º 'trend1d' –∫–∞–∫ –µ—Å—Ç—å ("up"/"down"/None)
    # –ü–æ–ª—è –∑–æ–Ω—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å —à–∏—Ä–∏–Ω–∞, TrueTrading –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–∏–∑–æ—Å—Ç—å
    return {
        "symbol": ev.symbol,
        "tf": ev.tf,
        "side": ev.side,
        "score": d.get("score", 0),
        "trend1d": ev.trend1d,
        "zone_center": ev.zone_center,
        "zone_halfwidth": ev.zone_halfwidth,
        # –ø–ª—é—Å –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å price/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ‚Äî –Ω–µ –º–µ—à–∞—é—Ç
        "price": ev.price,
        "components": ev.components,
    }