# services/fusion.py
from __future__ import annotations

from dataclasses import dataclass, asdict
from typing import Optional, List, Dict

from services.analyze import analyze_symbol
from services.breaker import detect_breakout
from services.reversal import detect_reversals
from services.market_data import get_price, get_candles

# –ü–æ—Ä–æ–≥ –¥–ª—è —É—á—ë—Ç–∞ Strategy –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
try:
    from config import FUSION_MIN_CONF
except Exception:
    FUSION_MIN_CONF = 75

# –°–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞—Å—Ç—å –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (2 –∏–∑ 3)
try:
    from config import FUSION_REQUIRE_ANY
except Exception:
    FUSION_REQUIRE_ANY = 2

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–µ–π–∫–µ—Ä–∞
try:
    from config import BREAKER_LOOKBACK, BREAKER_EPS
except Exception:
    BREAKER_LOOKBACK, BREAKER_EPS = 50, 0.001


@dataclass
class FusionEvent:
    """
    –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Fusion-—Å–∏–≥–Ω–∞–ª–∞.
    –í–ê–ñ–ù–û: –ø–æ–ª–µ 'score' (–¥—É–±–ª–∏–∫–∞—Ç confidence) ‚Äî —Ç–æ, —á—Ç–æ —á–∏—Ç–∞–µ—Ç TrueTrading.
    """
    symbol: str
    tf: str                    # TF –≤–æ—Ç—á–µ—Ä-—Ü–∏–∫–ª–∞ (–¥–ª—è breaker), –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
    side: str                  # "long" | "short"
    confidence: int            # 0..100
    score: int                 # == confidence (–¥–ª—è TrueTrading)
    price: float
    exchange: str
    components: Dict[str, str] # {"strategy": "...", "breaker": "...", "reversal": "..."}
    reasons: List[str]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è TrueTrading –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª—é—ç–Ω—Å–∞ –ø–æ —Ü–µ–Ω–µ:
    trend1d: Optional[str] = None          # "up" | "down"
    zone_center: Optional[float] = None    # —Ü–µ–Ω—Ç—Ä –∑–æ–Ω—ã Fusion (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∑–æ–Ω—ã)
    zone_halfwidth: Optional[float] = None # –ø–æ–ª—É-—à–∏—Ä–∏–Ω–∞ –∑–æ–Ω—ã


def _reversal_side(kind: str) -> Optional[str]:
    if kind in ("impulse_bull", "bullish_div"):
        return "long"
    if kind in ("impulse_bear", "bearish_div"):
        return "short"
    return None


def _breaker_side(direction: Optional[str]) -> Optional[str]:
    if direction == "up":
        return "long"
    if direction == "down":
        return "short"
    return None


async def _calc_trend_1d(symbol: str) -> Optional[str]:
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–Ω–¥ 1D –ø–æ EMA(21) –∏ EMA(50).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "up"/"down" –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        dfd, _ = await get_candles(symbol, "1d", limit=150)
        if dfd is None or dfd.empty:
            return None
        ema21 = dfd["close"].ewm(span=21, adjust=False).mean()
        ema50 = dfd["close"].ewm(span=50, adjust=False).mean()
        return "up" if (ema21.iloc[-1] - ema50.iloc[-1]) >= 0 else "down"
    except Exception:
        return None


async def analyze_fusion(symbol: str, tf: str) -> Optional[FusionEvent]:
    """
    ¬´–ì–æ–ª–æ—Å–æ–≤–∞–ª–∫–∞¬ª:
      ‚Ä¢ Strategy: analyze_symbol(); –≥–æ–ª–æ—Å –∏–¥—ë—Ç, –µ—Å–ª–∏ conf >= FUSION_MIN_CONF.
      ‚Ä¢ Breaker: detect_breakout(); up -> long, down -> short.
      ‚Ä¢ Reversal: –±–µ—Ä—ë–º —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ —Å–æ–±—ã—Ç–∏–µ; bull->long, bear->short.
    –ò—Ç–æ–≥: –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã FUSION_REQUIRE_ANY –º–æ–¥—É–ª–µ–π —Å–æ—à–ª–∏—Å—å ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º FusionEvent.
    """
    # 1) Strategy
    S = await analyze_symbol(symbol)
    s_signal = (S.get("signal") or "none").lower()
    s_conf   = int(S.get("confidence") or 0)
    s_side   = s_signal if s_signal in ("long", "short") and s_conf >= FUSION_MIN_CONF else None

    # 2) Breaker
    B = await detect_breakout(symbol, tf=tf, lookback=BREAKER_LOOKBACK, eps=BREAKER_EPS)
    b_side = _breaker_side(B.direction) if B else None

    # 3) Reversal (–±–µ—Ä—ë–º —Å–∞–º–æ–µ ¬´–≤–µ—Å–æ–º–æ–µ –∏ —Å–≤–µ–∂–µ–µ¬ª)
    R = await detect_reversals(symbol)
    r_side = None
    r_kind = None
    if R:
        tf_weight = {"5m": 3, "10m": 3, "15m": 2, "30m": 2, "1h": 1, "4h": 0}
        R_sorted = sorted(R, key=lambda e: (tf_weight.get(e.tf, -1), e.ts), reverse=True)
        r_sel = R_sorted[0]
        r_side = _reversal_side(r_sel.kind)
        r_kind = r_sel.kind

    # –ü–æ–¥—Å—á—ë—Ç –≥–æ–ª–æ—Å–æ–≤
    votes: Dict[str, int] = {"long": 0, "short": 0}
    weights: Dict[str, List[int]] = {"long": [], "short": []}
    reasons: List[str] = []

    if s_side:
        votes[s_side] += 1
        weights[s_side].append(s_conf)
        reasons.append(f"Strategy: {s_side} (conf={s_conf})")
    else:
        reasons.append("Strategy: none / low-confidence")

    if b_side:
        votes[b_side] += 1
        weights[b_side].append(70)
        reasons.append(f"Breaker: {b_side}")
    else:
        reasons.append("Breaker: none")

    if r_side:
        votes[r_side] += 1
        weights[r_side].append(75)
        reasons.append(f"Reversal: {r_side} ({r_kind})")
    else:
        reasons.append("Reversal: none")

    # –í—ã–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω—ã
    side = None
    for k in ("long", "short"):
        if votes[k] >= FUSION_REQUIRE_ANY:
            side = k
            break
    if side is None:
        return None

    # –ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    base_conf = 0
    if weights[side]:
        base_conf = int(sum(weights[side]) / len(weights[side]))
    if (s_side and b_side == side and r_side == side):
        base_conf = min(100, base_conf + 10)  # –±–æ–Ω—É—Å –∑–∞ 3/3

    # –¶–µ–Ω–∞/–±–∏—Ä–∂–∞
    try:
        price, ex = await get_price(symbol)
    except Exception:
        price, ex = float(S.get("price") or 0), S.get("exchange") or "‚Äî"

    components = {
        "strategy": s_side or "none",
        "breaker": b_side or "none",
        "reversal": r_side or "none",
    }

    # –¢—Ä–µ–Ω–¥ 1D (–¥–ª—è TrueTrading)
    t1d = await _calc_trend_1d(symbol)

    # –ó–æ–Ω–∞ Fusion (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): —Ü–µ–Ω—Ç—Ä ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞; —à–∏—Ä–∏–Ω—É –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–æ–∑–∂–µ
    zone_center = price
    zone_halfwidth = None

    # –í–ê–ñ–ù–û: score = confidence
    ev = FusionEvent(
        symbol=symbol,      # –±–µ–∑ .upper(), —á—Ç–æ–±—ã —Å–æ–≤–ø–∞–ª–æ —Å —Ç–µ–º, –∫–∞–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ Fibo
        tf=tf,
        side=side,
        confidence=base_conf,
        score=base_conf,    # –∫–ª—é—á –¥–ª—è TrueTrading
        price=price,
        exchange=ex,
        components=components,
        reasons=reasons,
        trend1d=t1d,
        zone_center=zone_center,
        zone_halfwidth=zone_halfwidth,
    )
    return ev


def format_fusion_message(ev: FusionEvent) -> str:
    head = "üß© Fusion ‚Äî LONG" if ev.side == "long" else "üß© Fusion ‚Äî SHORT"
    parts = [
        f"{head}",
        f"{ev.symbol} ‚Äî {ev.price:.8f} ({ev.exchange})",
        f"TF: {ev.tf}  ‚Ä¢  Confidence: {ev.confidence}%  ‚Ä¢  1D: {ev.trend1d or '‚Äî'}",
        "Confluence:",
        f"‚Ä¢ Strategy: {ev.components.get('strategy')}",
        f"‚Ä¢ Breaker:  {ev.components.get('breaker')}",
        f"‚Ä¢ Reversal: {ev.components.get('reversal')}",
    ]
    if ev.reasons:
        parts.append("")
        for r in ev.reasons[:5]:
            parts.append(f"‚Ä¢ {r}")
    return "\n".join(parts)


# ==== –î–ª—è TrueTrading: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è —Ä–æ–≤–Ω–æ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ====

def fusion_to_tt_dict(ev: FusionEvent) -> Dict[str, object]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç TrueTrading.update_fusion():
      ‚Ä¢ side: "long"/"short"
      ‚Ä¢ score: int (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä–æ–º ATTN_FUSION_MIN)
      ‚Ä¢ trend1d: "up"/"down" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      ‚Ä¢ zone_center / zone_halfwidth: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
      ‚Ä¢ price/components ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã
    """
    d = asdict(ev)
    d["score"] = int(ev.score)
    return {
        "symbol": ev.symbol,
        "tf": ev.tf,
        "side": ev.side,
        "score": d.get("score", 0),
        "trend1d": ev.trend1d,
        "zone_center": ev.zone_center,
        "zone_halfwidth": ev.zone_halfwidth,
        "price": ev.price,
        "components": ev.components,
    }