# -*- coding: utf-8 -*-
from typing import Dict, List, Optional, Tuple

# ---------- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
def fmt_price(x: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã: –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Ç—ã—Å—è—á, –¥–æ 2 –∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ <1 ‚Äî –¥–æ 4 –∑–Ω–∞–∫–æ–≤)."""
    if x is None:
        return "-"
    ax = abs(float(x))
    if ax < 1:
        s = f"{x:.4f}"
    elif ax < 10:
        s = f"{x:,.3f}".replace(",", " ")
    else:
        s = f"{x:,.2f}".replace(",", " ")
    if s.endswith(".000"):
        s = s[:-4]
    if s.endswith(".00"):
        s = s[:-3]
    if s.endswith(".0"):
        s = s[:-2]
    return s

# ---------- —É—Ç–∏–ª–∏—Ç—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π ----------
def _auto_ndigits(ref_price: Optional[float]) -> int:
    if ref_price is None:
        return 2
    p = abs(float(ref_price))
    if p < 1:
        return 4
    if p < 10:
        return 3
    return 2

def _tidy_levels(values: List[float], ref_price: Optional[float], max_count: int = 4) -> List[float]:
    """
    1) –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ
    2) —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π/–ø–æ—á—Ç–∏-–¥—É–±–ª–µ–π (eps –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏)
    3) –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    """
    if not values:
        return []

    nd = _auto_ndigits(ref_price)
    step = 10 ** (-nd)
    eps = step * 0.5  # –≤—Å—ë –±–ª–∏–∂–µ —ç—Ç–æ–≥–æ —Å—á–∏—Ç–∞–µ–º –æ–¥–Ω–∏–º —É—Ä–æ–≤–Ω–µ–º

    out: List[float] = []
    for v in values:
        if v is None:
            continue
        rv = round(float(v), nd)
        if not out:
            out.append(rv)
            continue
        if abs(rv - out[-1]) <= eps:
            continue
        if any(abs(rv - x) <= eps for x in out):
            continue
        out.append(rv)

    return out[:max_count]

def _levels_line(title: str, values: List[float]) -> str:
    if not values:
        return f"{title}: ‚Äî"
    vals = " ‚Ä¢ ".join(fmt_price(v) for v in values[:4])
    return f"{title}: {vals}"

# ---------- RR –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–æ—Ä–æ–Ω ----------
def _normalize_side(val: Optional[str]) -> str:
    if not val:
        return "none"
    v = str(val).strip().lower()
    if v in ("long", "buy", "bull"):
        return "long"
    if v in ("short", "sell", "bear"):
        return "short"
    return "none"

def _calc_rr(entry: Optional[float], sl: Optional[float], tp: Optional[float], side: str) -> Optional[float]:
    if entry is None or sl is None or tp is None:
        return None
    entry = float(entry); sl = float(sl); tp = float(tp)
    risk = abs(entry - sl)
    if risk <= 0:
        return None
    reward = abs(tp - entry)
    rr = reward / risk

    # –ï—Å–ª–∏ TP –Ω–∞ ¬´–Ω–µ —Ç–æ–π¬ª —Å—Ç–æ—Ä–æ–Ω–µ, —Å–¥–µ–ª–∞–µ–º RR —Å –º–∏–Ω—É—Å–æ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –ø—Ä–æ–±–ª–µ–º—É
    if side == "long" and tp <= entry:
        rr = -rr
    if side == "short" and tp >= entry:
        rr = -rr
    return rr

def _format_rr(rr: Optional[float]) -> str:
    if rr is None:
        return ""
    # –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´–º–∏–ª–ª–∏–∞—Ä–¥–æ–≤¬ª
    if rr > 9999:
        return "(RR>9999)"
    if rr < -9999:
        return "(RR<-9999)"
    return f"(RR={rr:.2f})"

def _sanitize_tp_sl(entry: Optional[float], sl: Optional[float], tp1: Optional[float], tp2: Optional[float], side: str
                   ) -> Tuple[Optional[float], Optional[float], Optional[float]]:
    """–ú—è–≥–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—á–µ–≤–∏–¥–Ω—ã—Ö –Ω–µ–ª–µ–ø–æ—Å—Ç–µ–π —Å—Ç–æ—Ä–æ–Ω, –ù–ò–ß–ï–ì–û –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Ç–æ–ª—å–∫–æ —á–∏–Ω–∏—Ç –º–µ—Å—Ç–∞–º–∏."""
    if entry is None:
        return sl, tp1, tp2
    e = float(entry)
    if sl is not None:
        s = float(sl)
        if side == "long" and s >= e:
            # –ø–µ—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ –Ω–∞ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–≤–µ—Ç–∏–º —á–µ—Ä–µ–∑ RR<0
            pass
        if side == "short" and s <= e:
            pass
    if side == "long":
        # —É–ø–æ—Ä—è–¥–æ—á–∏–º —Ü–µ–ª–∏: –≤—Å—ë, —á—Ç–æ –Ω–∏–∂–µ entry, –æ—Å—Ç–∞–≤–∏–º, –Ω–æ RR –ø–æ–∫–∞–∂–µ—Ç –∑–Ω–∞–∫ ¬´-¬ª
        if tp1 is not None and tp2 is not None and tp1 > tp2:
            tp1, tp2 = tp2, tp1
    elif side == "short":
        if tp1 is not None and tp2 is not None and tp1 < tp2:
            tp1, tp2 = tp2, tp1
    return sl, tp1, tp2

# ---------- –∞–¥–∞–ø—Ç–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä ----------
def _adapt_levels(levels_obj: Dict) -> Tuple[List[float], List[float]]:
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Å—Ö–µ–º: {'res1','res2','sup1','sup2'} –ò–õ–ò {'resistance':[], 'support':[]}."""
    if not levels_obj:
        return [], []
    if all(k in levels_obj for k in ("res1", "res2", "sup1", "sup2")):
        res = [levels_obj["res1"], levels_obj["res2"]]
        sup = [levels_obj["sup1"], levels_obj["sup2"]]
        return res, sup
    # –∏–Ω–∞—á–µ –æ–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–∫–∏
    res = list(levels_obj.get("resistance") or [])
    sup = list(levels_obj.get("support") or [])
    return res, sup

def _adapt_fields(res: Dict) -> Dict:
    """–ü—Ä–∏–≤–æ–¥–∏–º –ø–æ–ª—è –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏."""
    out = dict(res)  # –Ω–µ–≥–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
    # side
    side = res.get("signal") or res.get("direction") or "none"
    out["side"] = _normalize_side(side)

    # TF
    out["tf"] = res.get("entry_tf") or res.get("tf") or "?"

    # trend 4h
    out["trend4h"] = res.get("trend_4h") or res.get("trend4h") or res.get("trend4H") or "?"

    # levels unify
    res_levels, sup_levels = _adapt_levels(res.get("levels") or {})
    price = res.get("price")
    out["res_levels"] = _tidy_levels(res_levels, price)
    out["sup_levels"] = _tidy_levels(sup_levels, price)

    # entry/targets/stop
    out["entry"] = price  # –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –º—ã —Å—á–∏—Ç–∞–µ–º entry = —Ç–µ–∫—É—â–∞—è/—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
    out["tp1"] = res.get("tp1")
    out["tp2"] = res.get("tp2")
    out["sl"]  = res.get("sl")

    return out

# ---------- –æ—Å–Ω–æ–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ----------
def build_signal_message(res: Dict) -> str:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥ –∫–∞–∫ –æ—Ç analyze_symbol(), —Ç–∞–∫ –∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç RR –≤–æ–∑–ª–µ TP1/TP2.
    """
    r = _adapt_fields(res)

    symbol     = r.get("symbol", "?")
    exchange   = r.get("exchange") or r.get("ex") or ""
    price      = r.get("price")
    side       = r.get("side", "none")
    confidence = int(r.get("confidence", 0))
    tf         = r.get("tf", "?")
    trend4h    = r.get("trend4h", "?")
    h_adx      = r.get("h_adx") or r.get("adx")
    h_rsi      = r.get("h_rsi") or r.get("rsi")
    bb_width   = r.get("bb_width")
    reasons    = r.get("reasons") or []
    tags       = r.get("tags") or []
    scenario   = r.get("scenario")

    res_levels = r.get("res_levels") or []
    sup_levels = r.get("sup_levels") or []

    entry = r.get("entry")
    tp1   = r.get("tp1")
    tp2   = r.get("tp2")
    sl    = r.get("sl")

    # –ú—è–≥–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ—Ä–æ–Ω TP/SL (–±–µ–∑ –ø–µ—Ä–µ—Å—á—ë—Ç–∞)
    sl, tp1, tp2 = _sanitize_tp_sl(entry, sl, tp1, tp2, side)

    # RR
    rr1 = _calc_rr(entry, sl, tp1, side)
    rr2 = _calc_rr(entry, sl, tp2, side)

    # —à–∞–ø–∫–∞
    if side == "long":
        sig_mark = "üü¢ LONG"
        arrow = "‚Üë"
    elif side == "short":
        sig_mark = "üî¥ SHORT"
        arrow = "‚Üì"
    else:
        sig_mark = "‚ö™ NONE"
        arrow = "¬∑"

    conf_mark = "üü¢" if confidence >= 80 else ("üü°" if confidence >= 60 else "üî¥")
    ex_suffix = f" ({exchange})" if exchange else ""

    lines: List[str] = []
    lines.append(f"{symbol} ‚Äî {fmt_price(price)}{ex_suffix}")
    lines.append(f"{sig_mark} {arrow}  ‚Ä¢  TF: {tf}  ‚Ä¢  Confidence: {confidence}% {conf_mark}")

    if scenario:
        lines.append(f"‚ö† {scenario}")

    # –∫—Ä–∞—Ç–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    m1 = []
    if trend4h:
        m1.append(f"4H trend: {trend4h}")
    if h_adx is not None or h_rsi is not None or bb_width is not None:
        adx_s = f"ADX={h_adx:.1f}" if isinstance(h_adx, (int, float)) else "ADX=‚Äì"
        rsi_s = f"RSI={h_rsi:.1f}" if isinstance(h_rsi, (int, float)) else "RSI=‚Äì"
        bb_s  = f"BB width={bb_width:.2f}%" if isinstance(bb_width, (int, float)) else "BB width=‚Äì"
        m1.append(f"1H {adx_s} | {rsi_s} | {bb_s}")
    for x in m1:
        lines.append(f"‚Ä¢ {x}")

    # –ø—Ä–∏—á–∏–Ω—ã
    for reason in (reasons[:6] or []):
        lines.append(f"‚Ä¢ {reason}")

    # —É—Ä–æ–≤–Ω–∏
    lines.append("")
    lines.append("üìä Levels:")
    lines.append(_levels_line("Resistance", res_levels))
    lines.append(_levels_line("Support",    sup_levels))

    # —Ü–µ–ª–∏/—Å—Ç–æ–ø + RR
    if any(v is not None for v in (tp1, tp2, sl)):
        lines.append("")
        if tp1 is not None:
            lines.append(f"üéØ TP1: {fmt_price(tp1)} {_format_rr(rr1)}".rstrip())
        if tp2 is not None:
            lines.append(f"üéØ TP2: {fmt_price(tp2)} {_format_rr(rr2)}".rstrip())
        if sl is not None:
            lines.append(f"üõ° SL: {fmt_price(sl)}")

    # entry —è–≤–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ —Ç–≤–æ—ë–º —à–∞–±–ª–æ–Ω–µ)
    if entry is not None:
        lines.append(f"‚Äî Entry: {fmt_price(entry)}")

    # —Ç–µ–≥–∏
    if tags:
        lines.append("")
        lines.append("üè∑ " + " ‚Ä¢ ".join(str(t) for t in tags[:6]))

    return "\n".join(lines)