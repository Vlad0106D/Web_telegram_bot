–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–µ–º 
–ï—Å–ª–∏ –±—É–¥—É—Ç –æ–ø—è—Ç—å –æ—à–∏–±–∫–∏, —è –≤–µ—Ä–Ω—É –æ–±—Ä–∞—Ç–Ω–æ 


# -*- coding: utf-8 -*-
from typing import Dict, List, Optional

def fmt_price(x: float) -> str:
    # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã: —Ç—ã—Å—è—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏, –¥–æ 2 –∑–Ω–∞–∫–æ–≤ (–∏–ª–∏ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –¥–ª—è —Ü–µ–ª—ã—Ö)
    if x is None:
        return "-"
    s = f"{x:,.2f}".replace(",", " ")
    if s.endswith(".00"):
        s = s[:-3]
    return s

# --------- NEW: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π ---------
def _auto_ndigits(ref_price: Optional[float]) -> int:
    if ref_price is None:
        return 2
    p = abs(float(ref_price))
    if p < 1:
        return 4
    if p < 10:
        return 3
    return 2

def _tidy_levels(values: List[float], ref_price: Optional[float], max_count: int = 4) -> List[float]:
    """
    1) –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ
    2) —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π/–ø–æ—á—Ç–∏-–¥—É–±–ª–µ–π (eps –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏)
    3) –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    """
    if not values:
        return []

    nd = _auto_ndigits(ref_price)
    step = 10 ** (-nd)
    eps = step * 0.5  # –≤—Å—ë –±–ª–∏–∂–µ —ç—Ç–æ–≥–æ —Å—á–∏—Ç–∞–µ–º –æ–¥–Ω–∏–º —É—Ä–æ–≤–Ω–µ–º

    # –æ–∫—Ä—É–≥–ª–∏–º –∏ —É–¥–∞–ª–∏–º –ø–æ—á—Ç–∏-–¥—É–±–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    out: List[float] = []
    for v in values:
        if v is None:
            continue
        rv = round(float(v), nd)
        if not out:
            out.append(rv)
            continue
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
        if abs(rv - out[-1]) <= eps:
            continue
        # —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ –≤—Å–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º (–Ω–∞ –≤—Å—è–∫–∏–π)
        if any(abs(rv - x) <= eps for x in out):
            continue
        out.append(rv)

    # –æ–±—Ä–µ–∂–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if len(out) > max_count:
        out = out[:max_count]
    return out

def _levels_line(title: str, values: List[float]) -> str:
    if not values:
        return f"{title}: ‚Äî"
    vals = " ‚Ä¢ ".join(fmt_price(v) for v in values[:4])
    return f"{title}: {vals}"

def build_signal_message(res: Dict) -> str:
    """
    –û–∂–∏–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É res –æ—Ç analyze_symbol():
      {
        'symbol': 'BTCUSDT',
        'price': 12345.67,
        'exchange': 'OKX' | 'KuCoin' | ...,
        'signal': 'long' | 'short' | 'none',
        'confidence': 0..100,
        'entry_tf': '1h' | '15m' | ...
        'trend_4h': 'up'|'down'|'flat',
        'h_adx': float,
        'h_rsi': float,
        'bb_width': float,
        'reasons': [str, ...],
        'levels': {'resistance': [..], 'support': [..]},
        'tp1': Optional[float], 'tp2': Optional[float], 'sl': Optional[float],
        'tags': [str, ...],
        'scenario': Optional[str],
      }
    """

    symbol      = res.get("symbol", "?")
    price       = res.get("price")
    exchange    = res.get("exchange", "")
    signal      = (res.get("signal") or "none").lower()
    confidence  = int(res.get("confidence", 0))
    entry_tf    = res.get("entry_tf", "?")
    trend_4h    = res.get("trend_4h", "?")
    h_adx       = res.get("h_adx")
    h_rsi       = res.get("h_rsi")
    bb_width    = res.get("bb_width")
    reasons     = res.get("reasons") or []
    levels      = res.get("levels") or {}
    raw_res     = levels.get("resistance") or []
    raw_sup     = levels.get("support") or []
    tp1         = res.get("tp1")
    tp2         = res.get("tp2")
    sl          = res.get("sl")
    tags        = res.get("tags") or []
    scenario    = res.get("scenario")

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É—Ä–æ–≤–Ω–∏ (—É–¥–∞–ª–∏–º –¥—É–±–ª–∏/–ø–æ—á—Ç–∏-–¥—É–±–ª–∏ –∏ –∫—Ä–∞—Å–∏–≤–æ –æ–∫—Ä—É–≥–ª–∏–º)
    res_levels  = _tidy_levels(list(raw_res), price)
    sup_levels  = _tidy_levels(list(raw_sup), price)

    # —à–∞–ø–∫–∞
    if signal == "long":
        sig_mark = "üü¢ LONG"
    elif signal == "short":
        sig_mark = "üî¥ SHORT"
    else:
        sig_mark = "‚ö™ NONE"

    conf_mark = "üü¢" if confidence >= 80 else ("üü°" if confidence >= 60 else "üî¥")
    ex_suffix = f" ({exchange})" if exchange else ""

    lines = []
    lines.append(f"{symbol} ‚Äî {fmt_price(price)}{ex_suffix}")
    lines.append(f"{sig_mark}  ‚Ä¢  TF: {entry_tf}  ‚Ä¢  Confidence: {confidence}% {conf_mark}")

    if scenario:
        lines.append(f"‚ö† {scenario}")

    # –∫—Ä–∞—Ç–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    m1 = []
    if trend_4h:
        m1.append(f"4H trend: {trend_4h}")
    if h_adx is not None or h_rsi is not None or bb_width is not None:
        adx_s = f"ADX={h_adx:.1f}" if h_adx is not None else "ADX=‚Äì"
        rsi_s = f"RSI={h_rsi:.1f}" if h_rsi is not None else "RSI=‚Äì"
        bb_s  = f"BB width={bb_width:.2f}%" if bb_width is not None else "BB width=‚Äì"
        m1.append(f"1H {adx_s} | {rsi_s} | {bb_s}")
    if m1:
        for x in m1:
            lines.append(f"‚Ä¢ {x}")

    # –ø—Ä–∏—á–∏–Ω—ã
    if reasons:
        for r in reasons[:6]:
            lines.append(f"‚Ä¢ {r}")

    # —É—Ä–æ–≤–Ω–∏
    lines.append("")
    lines.append("üìä Levels:")
    lines.append(_levels_line("Resistance", res_levels))
    lines.append(_levels_line("Support",    sup_levels))

    # —Ü–µ–ª–∏/—Å—Ç–æ–ø
    if any(v is not None for v in (tp1, tp2, sl)):
        lines.append("")
        if tp1 is not None:
            lines.append(f"üéØ TP1: {fmt_price(tp1)}")
        if tp2 is not None:
            lines.append(f"üéØ TP2: {fmt_price(tp2)}")
        if sl is not None:
            lines.append(f"üõ° SL: {fmt_price(sl)}")

    # —Ç–µ–≥–∏
    if tags:
        lines.append("")
        lines.append("üè∑ " + " ‚Ä¢ ".join(str(t) for t in tags[:6]))

    return "\n".join(lines)




–≠—Ç–æ —Ä–∞–±–æ—á–∏–π –∫–æ–¥