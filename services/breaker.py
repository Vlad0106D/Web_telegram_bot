# services/breaker.py
from __future__ import annotations

from dataclasses import dataclass
from typing import Optional, Tuple

import pandas as pd

from services.market_data import get_candles, get_price
from services.indicators import bb_width as bb_width_series


@dataclass
class BreakoutEvent:
    symbol: str
    tf: str
    direction: str              # "up" | "down" (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —Ö–æ–¥–∞ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è)
    price: float
    exchange: str
    range_high: float
    range_low: float
    lookback: int
    bb_width_pct: Optional[float]   # —à–∏—Ä–∏–Ω–∞ BB –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ, %
    ts: int                         # unix-ms –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
    # –Ω–æ–≤—ã–µ –ø–æ–ª—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)
    kind: str = "breakout"          # "breakout" | "reversal"
    prev_close: Optional[float] = None


def _range_hl(df: pd.DataFrame, lookback: int) -> Tuple[float, float]:
    """–î–∏–∞–ø–∞–∑–æ–Ω High/Low –ø–æ—Å–ª–µ–¥–Ω–∏—Ö lookback —Å–≤–µ—á–µ–π (–ø–æ close –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)."""
    tail = df.tail(lookback)
    return float(tail["close"].max()), float(tail["close"].min())


async def detect_breakout(symbol: str, tf: str, lookback: int, eps: float) -> Optional[BreakoutEvent]:
    """
    –ì–∏–±—Ä–∏–¥:
      1) Breakout: –ø–æ—Å–ª–µ–¥–Ω–∏–π close –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö lookback —Å–≤–µ—á–µ–π:
         - close > high * (1 + eps)  => direction="up"
         - close < low  * (1 - eps)  => direction="down"
      2) Reversal (fakeout): –ø—Ä–µ–¥. —Å–≤–µ—á–∞ –ø—Ä–æ–∫–∞–ª—ã–≤–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω (high>up_thr –∏–ª–∏ low<dn_thr),
         –∞ —Ç–µ–∫—É—â–∞—è –∑–∞–∫—Ä—ã–ª–∞—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (close<=high –∏–ª–∏ close>=low)
         –∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –ø—Ä–æ–∫–æ–ª—É.
         - prev_high > up_thr AND last_close <= high  -> direction="down", kind="reversal"
         - prev_low  < dn_thr AND last_close >= low   -> direction="up",   kind="reversal"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ None.
    """
    # –±–µ—Ä—ë–º —á—É—Ç—å —Å –∑–∞–ø–∞—Å–æ–º (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–∏: prev –∏ last)
    df, _ = await get_candles(symbol, tf=tf, limit=max(lookback + 10, 80))
    if df.empty or len(df) < lookback + 2:
        return None

    # –î–∏–∞–ø–∞–∑–æ–Ω —Å—á–∏—Ç–∞–µ–º –±–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö —Å–≤–µ—á–µ–π (—Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –¥–ª—è fakeout)
    base = df.iloc[: -2]
    if base.empty:
        return None

    high, low = _range_hl(base, lookback=lookback)

    prev = df.iloc[-2]
    last = df.iloc[-1]
    prev_close = float(prev["close"])
    prev_high = float(prev["high"])
    prev_low = float(prev["low"])

    last_close = float(last["close"])
    last_ts = int(last["time"])

    # –î–æ–ø. –º–µ—Ç—Ä–∏–∫–∞ ‚Äî BB width –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ
    bbw = bb_width_series(df["close"], 20, 2.0)
    last_bbw = float(bbw.iloc[-1]) if pd.notna(bbw.iloc[-1]) else None

    up_thr = high * (1.0 + eps)
    dn_thr = low * (1.0 - eps)

    # -------- 1) breakout --------
    if last_close > up_thr:
        price, ex = await get_price(symbol)
        return BreakoutEvent(
            symbol=symbol.upper(),
            tf=tf,
            direction="up",
            price=price,
            exchange=ex,
            range_high=high,
            range_low=low,
            lookback=lookback,
            bb_width_pct=last_bbw,
            ts=last_ts,
            kind="breakout",
            prev_close=prev_close,
        )
    if last_close < dn_thr:
        price, ex = await get_price(symbol)
        return BreakoutEvent(
            symbol=symbol.upper(),
            tf=tf,
            direction="down",
            price=price,
            exchange=ex,
            range_high=high,
            range_low=low,
            lookback=lookback,
            bb_width_pct=last_bbw,
            ts=last_ts,
            kind="breakout",
            prev_close=prev_close,
        )

    # -------- 2) reversal (fakeout) --------
    # –í—á–µ—Ä–∞ –ø—Ä–æ–∫–æ–ª –≤–≤–µ—Ä—Ö, —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫—Ä—ã–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤–Ω—É—Ç—Ä–∏ => —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑
    if prev_high > up_thr and last_close <= high and last_close < prev_close:
        price, ex = await get_price(symbol)
        return BreakoutEvent(
            symbol=symbol.upper(),
            tf=tf,
            direction="down",
            price=price,
            exchange=ex,
            range_high=high,
            range_low=low,
            lookback=lookback,
            bb_width_pct=last_bbw,
            ts=last_ts,
            kind="reversal",
            prev_close=prev_close,
        )

    # –í—á–µ—Ä–∞ –ø—Ä–æ–∫–æ–ª –≤–Ω–∏–∑, —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫—Ä—ã–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤–Ω—É—Ç—Ä–∏ => —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö
    if prev_low < dn_thr and last_close >= low and last_close > prev_close:
        price, ex = await get_price(symbol)
        return BreakoutEvent(
            symbol=symbol.upper(),
            tf=tf,
            direction="up",
            price=price,
            exchange=ex,
            range_high=high,
            range_low=low,
            lookback=lookback,
            bb_width_pct=last_bbw,
            ts=last_ts,
            kind="reversal",
            prev_close=prev_close,
        )

    return None


def format_breakout_message(ev: BreakoutEvent) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞. –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (breakout/reversal).
    """
    if ev.kind == "reversal":
        dir_emoji = "üü£ Reversal ‚Üë" if ev.direction == "up" else "üü† Reversal ‚Üì"
    else:
        dir_emoji = "üü¢ Breakout ‚Üë" if ev.direction == "up" else "üî¥ Breakout ‚Üì"

    lines = [
        f"{dir_emoji}",
        f"{ev.symbol} ‚Äî {ev.price:.8f} ({ev.exchange})",
        f"TF: {ev.tf}  ‚Ä¢  –î–∏–∞–ø–∞–∑–æ–Ω {ev.lookback}: H={ev.range_high:.8f} / L={ev.range_low:.8f}",
    ]
    if ev.bb_width_pct is not None:
        lines.append(f"BB width‚âà{ev.bb_width_pct:.2f}%")
    if ev.prev_close is not None:
        lines.append(f"Prev close: {ev.prev_close:.8f}")

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞-—Å–∏–≥–Ω–∞–ª (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—ã—á–Ω—ã–π —Å—Ç–∏–ª—å)
    if ev.kind == "reversal":
        lines.append("–°–∏–≥–Ω–∞–ª: " + ("reversal_up" if ev.direction == "up" else "reversal_down"))
    else:
        lines.append("–°–∏–≥–Ω–∞–ª: " + ("possible_up" if ev.direction == "up" else "possible_down"))

    return "\n".join(lines)