# strategy/base_strategy.py
import asyncio
from typing import Dict, Any, List, Tuple, Optional

import numpy as np
import pandas as pd

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
import ta

# –ù–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–≤–µ—á–µ–π
from services.market_data import get_candles  # –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å: await get_candles(symbol, tf, limit=...)
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –º—ã –ù–ï —Ç—è–Ω–µ–º get_price; –±–µ—Ä—ë–º —Ü–µ–Ω—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π.


# --------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# --------------------------

def _fmt_price(x: float) -> str:
    """–ê–∫–∫—É—Ä–∞—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á."""
    if x is None or np.isnan(x):
        return "‚Äî"
    # –î–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –æ—Å—Ç–∞–≤–∏–º 2 –∑–Ω–∞–∫–∞, –¥–ª—è –º–µ–ª–∫–∏—Ö 4
    digits = 2
    if x < 1:
        digits = 6
    return f"{x:,.{digits}f}".replace(",", " ").replace(".", ".")


def _macd_delta(close: pd.Series) -> float:
    macd = ta.trend.MACD(close=close, window_slow=26, window_fast=12, window_sign=9)
    hist = macd.macd_diff()
    return float(hist.iloc[-1])


def _ema(series: pd.Series, window: int) -> float:
    return float(series.ewm(span=window, adjust=False).mean().iloc[-1])


def _rsi(close: pd.Series, window: int = 14) -> float:
    return float(ta.momentum.RSIIndicator(close=close, window=window).rsi().iloc[-1])


def _adx(df: pd.DataFrame, window: int = 14) -> float:
    adx = ta.trend.ADXIndicator(
        high=df["high"], low=df["low"], close=df["close"], window=window
    ).adx()
    return float(adx.iloc[-1])


def _atr(df: pd.DataFrame, window: int = 14) -> float:
    atr = ta.volatility.AverageTrueRange(
        high=df["high"], low=df["low"], close=df["close"], window=window
    ).average_true_range()
    return float(atr.iloc[-1])


def _swing_levels(df: pd.DataFrame, lookback: int = 60, left: int = 2, right: int = 2) -> Tuple[List[float], List[float]]:
    """
    –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã (—Ñ—Ä–∞–∫—Ç–∞–ª—ã) –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö lookback –±–∞—Ä–∞—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (resistance_levels, support_levels) –ø–æ 1-2 –∑–Ω–∞—á–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    df = df.tail(lookback).copy()
    highs = df["high"].values
    lows = df["low"].values

    res_levels = []
    sup_levels = []

    # –§—Ä–∞–∫—Ç–∞–ª—ã: high[i] –±–æ–ª—å—à–µ —Å–æ—Å–µ–¥–Ω–∏—Ö -> —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ; low[i] –º–µ–Ω—å—à–µ —Å–æ—Å–µ–¥–Ω–∏—Ö -> –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    for i in range(left, len(df) - right):
        win_h = highs[i - left:i + right + 1]
        win_l = lows[i - left:i + right + 1]

        if highs[i] == max(win_h):
            res_levels.append(highs[i])
        if lows[i] == min(win_l):
            sup_levels.append(lows[i])

    # –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –±–ª–∏–∑–∫–∏–µ —É—Ä–æ–≤–Ω–∏ (—Å–ª–∏—à–∫–æ–º —Ä—è–¥–æ–º)
    def _dedup(levels: List[float], tol: float) -> List[float]:
        levels = sorted(levels, reverse=True)  # —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ –¥–ª—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–π
        out = []
        for lv in levels:
            if all(abs(lv - x) > tol for x in out):
                out.append(lv)
        return out

    # –î–æ–ø—É—Å–∫–∞: 0.2% –æ—Ç —Ü–µ–Ω—ã
    px = float(df["close"].iloc[-1])
    tol = px * 0.002

    res_levels = _dedup(res_levels, tol)[:2]
    sup_levels = _dedup(sorted(sup_levels), tol)[:2]  # –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö

    return (res_levels, sup_levels)


def _trend_4h(df_4h: pd.DataFrame) -> str:
    ema200 = df_4h["close"].ewm(span=200, adjust=False).mean()
    rsi4 = ta.momentum.RSIIndicator(close=df_4h["close"], window=14).rsi()

    last_close = float(df_4h["close"].iloc[-1])
    last_ema200 = float(ema200.iloc[-1])
    last_rsi = float(rsi4.iloc[-1])

    if last_close > last_ema200 and last_rsi >= 50:
        return "up"
    if last_close < last_ema200 and last_rsi <= 50:
        return "down"
    return "flat"


def _direction_confidence(ema9: float, ema21: float, rsi: float, adx_val: float, macd_d: float) -> Tuple[str, int]:
    """
    –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0..100).
    """
    direction = "none"
    score = 50

    if ema9 > ema21 and rsi > 55:
        direction = "long"
        score = 65
    elif ema9 < ema21 and rsi < 45:
        direction = "short"
        score = 65
    else:
        direction = "none"
        score = 50

    # –£—Å–∏–ª–∏–≤–∞–µ–º/–æ—Å–ª–∞–±–ª—è–µ–º
    if adx_val >= 25:
        score += 10
    elif adx_val < 15:
        score -= 10

    if macd_d > 0 and direction == "long":
        score += 10
    if macd_d < 0 and direction == "short":
        score += 10

    score = int(max(0, min(100, score)))
    return direction, score


def _risk_targets(direction: str, price: float, atr: float, sup: List[float], res: List[float]) -> Tuple[Optional[float], Optional[float], Optional[float]]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL/TP1/TP2.
    –õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–∞—è:
      - SL: –∑–∞ –±–ª–∏–∂–∞–π—à–∏–º —É—Ä–æ–≤–Ω–µ–º (—Å –∑–∞–ø–∞—Å–æ–º ~0.8*ATR)
      - TP1: –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
      - TP2: —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–∞–ª—å—à–µ –ò–õ–ò –±–∞–∑–æ–≤—ã–π RR~1:2.5 –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–∏—Å–∫–∞
    """
    if direction not in ("long", "short"):
        return None, None, None

    pad = 0.8 * atr

    if direction == "long":
        # —Å–ª–µ–≤–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–æ–ø–∞
        sl_level = sup[0] if sup else price - 1.5 * atr
        sl = min(sl_level - pad, price - 0.8 * atr)

        tp1 = res[0] if res else price + 1.5 * atr

        # —Ä–∏—Å–∫:
        risk = price - sl
        # —Ü–µ–ª–µ–≤–æ–π RR –¥–ª—è TP2
        tp2 = price + max(2.5 * risk, 1.8 * atr)
        # –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º –∏–∑ —É—Ä–æ–≤–Ω–µ–π/—Ä–∞—Å—á—ë—Ç–∞
        if len(res) > 1:
            tp2 = max(tp2, res[1])
        return sl, tp1, tp2

    else:
        # short
        sl_level = res[0] if res else price + 1.5 * atr
        sl = max(sl_level + pad, price + 0.8 * atr)

        tp1 = sup[0] if sup else price - 1.5 * atr

        risk = sl - price
        tp2 = price - max(2.5 * risk, 1.8 * atr)
        if len(sup) > 1:
            tp2 = min(tp2, sup[1])
        return sl, tp1, tp2


def format_signal(sig: Dict[str, Any]) -> str:
    """
    –ö—Ä–∞—Å–∏–≤—ã–π –æ–¥–Ω–æ-–±–ª–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ ‚Äúüíé –°–ò–ì–ù–ê–õ‚Äù —Å—Ç—Ä–æ–≥–æ –ø–æ –æ–±—Ä–∞–∑—Ü—É.
    –û–∂–∏–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–∑ analyze_symbol().
    """
    pair = sig["symbol"]
    price = sig["price"]
    tf = sig["tf"]
    dir_ = sig["direction"]
    score = sig["confidence"]
    updated = sig["updated"]
    source = sig.get("exchange", "‚Äî")

    # ‚Äú–ø–æ —Ç—Ä–µ–Ω–¥—É / –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥‚Äù
    regime = sig.get("regime", "‚Äî")
    regime_txt = "–ø–æ —Ç—Ä–µ–Ω–¥—É" if regime == "trend" else ("–∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥" if regime == "counter" else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π")

    # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    just: List[str] = sig.get("just", [])

    # –£—Ä–æ–≤–Ω–∏
    R = sig.get("levels", {}).get("R", [])
    S = sig.get("levels", {}).get("S", [])

    # –¶–µ–ª–∏
    tp1 = sig.get("tp1")
    tp2 = sig.get("tp2")
    sl = sig.get("sl")

    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å—Ç—Ä–µ–ª–∫–∞
    dir_name = "LONG" if dir_ == "long" else ("SHORT" if dir_ == "short" else "NONE")
    arrow = "‚Üë" if dir_ == "long" else ("‚Üì" if dir_ == "short" else "‚Ä¢")

    # –°–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    lines = []
    lines.append("üíé –°–ò–ì–ù–ê–õ")
    lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    lines.append(f"üîπ –ü–∞—Ä–∞: {pair}")
    lines.append(f"üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {dir_name} ({score}%) {arrow}")
    lines.append(f"üß≠ –†–µ–∂–∏–º: {regime_txt}")
    lines.append(f"üíµ –¶–µ–Ω–∞: {_fmt_price(price)}")
    lines.append(f"üïí –¢–§: {tf}")
    lines.append(f"üóì –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated} UTC")
    lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    if just:
        lines.append("üìå –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:")
        for j in just:
            lines.append(f"‚Ä¢ {j}")
        if source:
            lines.append(f"‚Ä¢ source:{source}")
        lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    # —É—Ä–æ–≤–Ω–∏
    lines.append("üìè –£—Ä–æ–≤–Ω–∏:")
    r_txt = " ‚Ä¢ ".join(_fmt_price(x) for x in R) if R else "‚Äî"
    s_txt = " ‚Ä¢ ".join(_fmt_price(x) for x in S) if S else "‚Äî"
    lines.append(f"R: {r_txt}")
    lines.append(f"S: {s_txt}")
    lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    # —Ü–µ–ª–∏
    if tp1 is not None:
        lines.append(f"üéØ TP1: {_fmt_price(tp1)}")
    if tp2 is not None:
        lines.append(f"üéØ TP2: {_fmt_price(tp2)}")
    if sl is not None:
        lines.append(f"üõ° SL: {_fmt_price(sl)}")
    lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

    return "\n".join(lines)


# --------------------------
# –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó
# --------------------------

async def analyze_symbol(symbol: str, entry_tf: str = "1h") -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞:
    {
      symbol, price, tf, updated, exchange,
      direction, confidence, regime, just[], levels{R,S}, tp1, tp2, sl
    }
    """
    # --- –≥—Ä—É–∑–∏–º —Å–≤–µ—á–∏ 1H –∏ 4H
    res_1h = await get_candles(symbol, entry_tf, limit=300)
    res_4h = await get_candles(symbol, "4h", limit=300)

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: (df, exchange, ...?) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ df
    def _unpack(res) -> Tuple[pd.DataFrame, Optional[str]]:
        if isinstance(res, tuple):
            df = res[0]
            ex = res[1] if len(res) > 1 else None
        else:
            df = res
            ex = None
        return df, ex

    df_1h, ex_1 = _unpack(res_1h)
    df_4h, ex_4 = _unpack(res_4h)
    exchange = ex_1 or ex_4 or ""

    # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    for df in (df_1h, df_4h):
        if not isinstance(df, pd.DataFrame) or df.empty:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    # —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ –≤ –Ω–∞–ª–∏—á–∏–∏
    for need in ("open", "high", "low", "close"):
        if need not in df_1h.columns or need not in df_4h.columns:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö OHLC")

    # --- —Ç–µ–∫—É—â–µ–µ
    price = float(df_1h["close"].iloc[-1])
    updated = pd.to_datetime(df_1h.index[-1]).strftime("%Y-%m-%d %H:%M:%S")

    # --- –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã 1H
    ema9 = _ema(df_1h["close"], 9)
    ema21 = _ema(df_1h["close"], 21)
    rsi = _rsi(df_1h["close"], 14)
    macd_d = _macd_delta(df_1h["close"])
    adx_val = _adx(df_1h, 14)
    atr = _atr(df_1h, 14)

    # --- —Ç—Ä–µ–Ω–¥ 4H
    trend4h = _trend_4h(df_4h)

    # --- —É—Ä–æ–≤–Ω–∏
    R, S = _swing_levels(df_1h, lookback=80, left=2, right=2)

    # --- –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    direction, confidence = _direction_confidence(ema9, ema21, rsi, adx_val, macd_d)

    # --- —Ä–µ–∂–∏–º (–ø–æ —Ç—Ä–µ–Ω–¥—É / –∫–æ–Ω—Ç—Ä)
    regime = "neutral"
    if direction == "long":
        regime = "trend" if trend4h == "up" else ("counter" if trend4h == "down" else "neutral")
    elif direction == "short":
        regime = "trend" if trend4h == "down" else ("counter" if trend4h == "up" else "neutral")

    # --- —Ü–µ–ª–∏
    sl, tp1, tp2 = _risk_targets(direction, price, atr, S, R)

    # --- –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (—á–∏—Å—Ç–æ —Ç–µ–∫—Å—Ç)
    just = [
        f"RSI={round(rsi,1)}, MACD {'–±—ã—á–∏–π' if macd_d>0 else ('–º–µ–¥–≤–µ–∂–∏–π' if macd_d<0 else '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')}, —Ü–µ–Ω–∞ {'>' if price>ema21 else '<' if price<ema21 else '='} EMA21",
        f"4H —Ç—Ä–µ–Ω–¥: {trend4h}",
        f"EMA9/21: {'up' if ema9>ema21 else 'down' if ema9<ema21 else 'flat'}, MACD Œî={round(macd_d,4)}",
    ]

    return {
        "symbol": symbol,
        "price": price,
        "tf": entry_tf,
        "updated": updated,
        "exchange": exchange,

        "direction": direction,
        "confidence": confidence,
        "regime": regime,

        "just": just,
        "levels": {"R": R, "S": S},

        "tp1": tp1,
        "tp2": tp2,
        "sl": sl,
    }