# strategy/base_strategy.py
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –Ω–∏–∫–∞–∫–æ–≥–æ run_until_complete.
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –ø–æ–ª—è–º–∏ —Å–∏–≥–Ω–∞–ª–∞ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.

from __future__ import annotations

import math
from datetime import datetime, timezone
from typing import Dict, List, Tuple

import pandas as pd

# --- –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã/—É—Ç–∏–ª–∏—Ç—ã ---
from services.market_data import get_candles  # async: await get_candles(symbol, tf, limit)
from services.indicators import (
    ema_series,
    rsi_series,
    macd_delta,
    adx_series,
    bb_width_series,
)

# fmt_price –º–æ–∂–µ—Ç –±—ã—Ç—å —É —Ç–µ–±—è –≤ utils. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π fallback.
try:
    from services.utils import fmt_price
except Exception:
    def fmt_price(x: float) -> str:
        # —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        if x is None:
            return "‚Äî"
        if x >= 1000:
            return f"{x:,.2f}".replace(",", " ")
        if x >= 1:
            return f"{x:.2f}"
        return f"{x:.6f}".rstrip("0").rstrip(".")


# ============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ==============

async def _safe_get_candles(symbol: str, tf: str, limit: int = 300) -> Tuple[pd.DataFrame, str]:
    """
    –ë–µ–∑ run_until_complete: –ø—Ä–æ—Å—Ç–æ await get_candles. –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –±—Ä–æ—Å–∞–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É.
    """
    df, exchange = await get_candles(symbol, tf, limit=limit)
    if df is None or len(df) == 0:
        raise ValueError(f"No candles for {symbol} {tf}")
    return df, exchange


def _fmt_levels(resist: List[float], support: List[float]) -> Tuple[str, str]:
    r = " ‚Ä¢ ".join(fmt_price(x) for x in resist) if resist else "‚Äî"
    s = " ‚Ä¢ ".join(fmt_price(x) for x in support) if support else "‚Äî"
    return r, s


def _build_levels(price: float) -> Tuple[List[float], List[float]]:
    """
    –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ —É—Ä–æ–≤–Ω–µ–π: —Ä—è–¥–æ–º —Å —Ü–µ–Ω–æ–π.
    –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ–¥–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–∏ —Å–≤–∏–Ω–≥–æ–≤—ã–µ/–ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ—É–º—ã.
    """
    # —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–≤—ã—à–µ —Ü–µ–Ω—ã)
    r1 = price * 1.006
    r2 = price * 1.015
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–Ω–∏–∂–µ —Ü–µ–Ω—ã)
    s1 = price * 0.995
    s2 = price * 0.985
    resist = sorted([r1, r2])
    support = sorted([s2, s1])  # –æ—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–π –∫ –±–ª–∏–∂–Ω–µ–π
    return resist, support


def _tp_sl(direction: str, price: float, resist: List[float], support: List[float]) -> Tuple[float | None, float | None, float | None]:
    """
    TP/SL. –î–ª—è LONG: SL –Ω–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, TP1 ‚Äî –±–ª–∏–∂–Ω–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ, TP2 ‚Äî –¥–∞–ª—å–Ω–µ–µ.
    –î–ª—è SHORT: SL –≤—ã—à–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, TP1 ‚Äî –±–ª–∏–∂–Ω—è—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, TP2 ‚Äî –¥–∞–ª—å–Ω—è—è.
    –ï—Å–ª–∏ —É—Ä–æ–≤–Ω–∏ ¬´—Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ¬ª ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä.
    """
    if direction == "LONG":
        sl = support[0] if support else price * 0.985
        tp1 = resist[0] if resist else price * 1.01
        tp2 = resist[-1] if len(resist) > 1 else max(tp1 * 1.01, price * 1.02)
        if math.isclose(tp1, tp2, rel_tol=5e-3, abs_tol=1e-6):
            tp2 = tp1 * 1.01
        return tp1, tp2, sl

    if direction == "SHORT":
        sl = resist[-1] if resist else price * 1.015
        tp1 = support[-1] if support else price * 0.99
        tp2 = support[0] if len(support) > 1 else min(tp1 * 0.99, price * 0.98)
        if math.isclose(tp1, tp2, rel_tol=5e-3, abs_tol=1e-6):
            tp2 = tp1 * 0.99
        return tp1, tp2, sl

    return None, None, None


def _confidence_color(score: int) -> str:
    if score >= 80:
        return "üü¢"
    if score >= 65:
        return "üü°"
    return "üî¥"


# ============== –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó ==============

async def analyze_symbol(symbol: str, tf: str = "1h") -> Dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ —Å–∏–≥–Ω–∞–ª–∞. –í—Å—ë async, –±–µ–∑ run_until_complete.
    """
    # 1) –°–≤–µ—á–∏
    df_1h, ex_1h = await _safe_get_candles(symbol, tf, limit=400)
    df_4h, _ = await _safe_get_candles(symbol, "4h", limit=400)

    close_1h = df_1h["close"].astype(float)

    # 2) –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    ema9_v = ema_series(close_1h, 9).iloc[-1]
    ema21_v = ema_series(close_1h, 21).iloc[-1]
    rsi_v = rsi_series(close_1h, 14).iloc[-1]
    macd_d = macd_delta(close_1h).iloc[-1]
    adx_v = adx_series(df_1h).iloc[-1]
    bbw_v = bb_width_series(close_1h).iloc[-1]

    # –¢—Ä–µ–Ω–¥ 4H –ø–æ EMA 9/21
    ema9_4h = ema_series(df_4h["close"].astype(float), 9).iloc[-1]
    ema21_4h = ema_series(df_4h["close"].astype(float), 21).iloc[-1]
    trend_4h = "up" if ema9_4h > ema21_4h else "down"

    price = float(close_1h.iloc[-1])

    # 3) –õ–æ–≥–∏–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–∫–æ—Ä–∞
    score = 50
    direction = "NONE"

    # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
    if ema9_v > ema21_v and rsi_v >= 50:
        direction = "LONG"
        score += 15
    elif ema9_v < ema21_v and rsi_v <= 50:
        direction = "SHORT"
        score += 15

    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç ADX/RSI/MACD
    if adx_v >= 25:
        score += 10
    if direction == "LONG" and trend_4h == "up":
        score += 10
    if direction == "SHORT" and trend_4h == "down":
        score += 10

    # 4) –£—Ä–æ–≤–Ω–∏ + TP/SL
    resist, support = _build_levels(price)
    tp1, tp2, sl = _tp_sl(direction, price, resist, support)

    # 5) –ì–æ—Ç–æ–≤–∏–º –≤—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å
    return {
        "symbol": symbol,
        "price": price,
        "exchange": ex_1h,
        "timeframe": tf,
        "trend4h": trend_4h,
        "ema9": float(ema9_v),
        "ema21": float(ema21_v),
        "rsi": float(rsi_v),
        "macd_delta": float(macd_d),
        "adx": float(adx_v),
        "bbw": float(bbw_v),
        "direction": direction,
        "score": int(score),
        "resist": resist,
        "support": support,
        "tp1": tp1,
        "tp2": tp2,
        "sl": sl,
        "updated_at": datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC"),
    }


# ============== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø ==============

def format_signal(sig: Dict) -> str:
    """
    –ö—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –µ–¥–∏–Ω–æ–π —Ñ–æ—Ä–º–µ.
    """
    symbol = sig["symbol"]
    price = fmt_price(sig["price"])
    ex = sig.get("exchange", "-")
    tf = sig.get("timeframe", "-")
    trend4h = sig.get("trend4h", "-")
    ema9 = fmt_price(sig.get("ema9"))
    ema21 = fmt_price(sig.get("ema21"))
    rsi = f'{sig.get("rsi", 0):.1f}'
    macd_d = f'{sig.get("macd_delta", 0.0):.4f}'
    adx = f'{sig.get("adx", 0.0):.1f}'
    bbw = f'{sig.get("bbw", 0.0)*100:.2f}%'

    direction = sig.get("direction", "NONE")
    score = sig.get("score", 0)
    conf_color = _confidence_color(score)

    r_text, s_text = _fmt_levels(sig.get("resist", []), sig.get("support", []))
    tp1 = fmt_price(sig.get("tp1"))
    tp2 = fmt_price(sig.get("tp2"))
    sl = fmt_price(sig.get("sl"))
    updated = sig.get("updated_at", "-")

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if direction == "LONG":
        headline = f"üü¢ LONG"
    elif direction == "SHORT":
        headline = f"üî¥ SHORT"
    else:
        headline = f"‚ö™ NONE"

    text = (
        f"{symbol} ‚Äî {price} ({ex})\n"
        f"{headline}  ‚Ä¢  TF: {tf}  ‚Ä¢  Confidence: {score}% {conf_color}\n"
        f"‚Ä¢ 4H trend: {trend4h}\n"
        f"‚Ä¢ EMA9={ema9} | EMA21={ema21} | RSI={rsi} | MACD Œî={macd_d} | ADX={adx} | BB width={bbw}\n"
        f"\n"
        f"üìä Levels:\n"
        f"Resistance: {r_text}\n"
        f"Support: {s_text}\n"
    )

    if direction in ("LONG", "SHORT"):
        text += (
            f"\n"
            f"üéØ TP1: {tp1}\n"
            f"üéØ TP2: {tp2}\n"
            f"üõ° SL: {sl}\n"
        )

    text += "\n" + updated
    return text